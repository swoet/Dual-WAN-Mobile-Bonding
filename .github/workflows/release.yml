name: release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Prepare Gradle wrapper jar
        run: bash scripts/setup_gradle_wrapper.sh
      - name: Grant execute permission for gradlew
        run: chmod +x app/android/gradlew
      - name: Build Debug APK
        working-directory: app/android
        run: ./gradlew assembleDebug
      - name: Sign Release APK (if secrets provided)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/android/release.keystore
          echo "storeFile=release.keystore" >> app/android/keystore.properties
          echo "storePassword=$ANDROID_KEYSTORE_PASSWORD" >> app/android/keystore.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> app/android/keystore.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> app/android/keystore.properties
          ./gradlew -p app/android assembleRelease
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: |
            app/android/app/build/outputs/apk/debug/*.apk
            app/android/app/build/outputs/apk/release/*.apk
  build-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Build server
        working-directory: server
        run: |
          go build -o bonding-server ./cmd/bonding-server
      - name: Docker build
        working-directory: server
        run: docker build -t ghcr.io/${{ github.repository_owner }}/bonding-server:${{ github.ref_name }} .
      - name: Login GHCR (if token)
        if: ${{ secrets.GITHUB_TOKEN != '' }}
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: docker push ghcr.io/${{ github.repository_owner }}/bonding-server:${{ github.ref_name }}
